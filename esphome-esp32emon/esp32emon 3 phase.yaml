esphome:
  name: voltage--amp
  friendly_name: Voltage & AMP
  includes:
    - emonlib/EmonLib.h
    - emonlib/EmonLib.cpp
    - esp32emon.h
  project:
    name: danpeig.esp32emon
    version: "1.5.0"    

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "XyEeuRUQuwVw+5eycxjQQZ2iFL64uZupxy/6pFfXKrA="

ota:
  password: "14b7a426c3bc4ec3be5ba6ece6900678"

wifi:
  networks:
#  - ssid: JIMIT1
#    password: "yog@13900"
  - ssid: TWO #!secret wifi_ssid
    password: "12341234" #!secret wifi_password

#  use_address: 10.36.152.102
# Optional manual IP
  manual_ip:
    static_ip: 10.36.152.42
    gateway: 10.36.152.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 8.8.4.4
  reboot_timeout: 0s

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Voltage--Amp Fallback Hotspot"
    password: "12341234"

captive_portal:

time:
  - platform: sntp
    id: sntp_time1
    on_time:
      # Every Month at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - sensor.integration.reset: total_energy_month #Reset power integrator
      # Every Week at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - sensor.integration.reset: total_energy_week #Reset power integrator
      # Every Day at specified hour
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.integration.reset: total_energy_day #Reset power integrator

button:
  - platform: restart
    name: "Reboot energy monitor"
#  - platform: safe_mode
#    name: "Reboot energy monitor in Safe Mode"

sensor:
  #Custom sensors from EMon
  - platform: custom
    lambda: |-
      auto my_sensor = new MyPowerSensor();
      App.register_component(my_sensor);

       # // 1-Phase - - uncomment only the following line for 1 phase measurements
       # //return {my_sensor->realpower_sensor1, my_sensor->apparentpower_sensor1, my_sensor->powerfactor_sensor1, my_sensor->supplyvoltage_sensor1, my_sensor->current_sensor1, my_sensor->realpower_sensor_total, my_sensor->apparentpower_sensor_total, my_sensor->current_sensor_total};

       # // 2-Phases - uncomment only the following line for 2 phase measurements
       # //return {my_sensor->realpower_sensor1, my_sensor->apparentpower_sensor1, my_sensor->powerfactor_sensor1, my_sensor->supplyvoltage_sensor1, my_sensor->current_sensor1, my_sensor->realpower_sensor2, my_sensor->apparentpower_sensor2, my_sensor->powerfactor_sensor2, my_sensor->supplyvoltage_sensor2, my_sensor->current_sensor2, my_sensor->realpower_sensor_total, my_sensor->apparentpower_sensor_total, my_sensor->current_sensor_total};

       # // 3-Phases - uncomment only the following line for 3 phase measurements
        return {my_sensor->realpower_sensor1, my_sensor->apparentpower_sensor1, my_sensor->powerfactor_sensor1, my_sensor->supplyvoltage_sensor1, my_sensor->current_sensor1, my_sensor->realpower_sensor2, my_sensor->apparentpower_sensor2, my_sensor->powerfactor_sensor2, my_sensor->supplyvoltage_sensor2, my_sensor->current_sensor2, my_sensor->realpower_sensor3, my_sensor->apparentpower_sensor3, my_sensor->powerfactor_sensor3, my_sensor->supplyvoltage_sensor3, my_sensor->current_sensor3, my_sensor->realpower_sensor_total, my_sensor->apparentpower_sensor_total, my_sensor->current_sensor_total};
    sensors:
      #Phase 1 sensors
      - name: "Real Power P1"
        device_class: "power"
        unit_of_measurement: W
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }
      - name: "Apparent Power P1"
        device_class: "apparent_power"
        unit_of_measurement: VA
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }
      - name: "Power Factor P1"
        device_class: "power_factor"
        state_class: "measurement"
        accuracy_decimals: 2
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }        
      - name: "Voltage P1"
        device_class: "voltage"
        unit_of_measurement: V
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Current P1"
        device_class: "current"
        unit_of_measurement: A
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   

        #Phase 2 sensors
      - name: "Real Power P2"
        device_class: "power"
        unit_of_measurement: W
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Apparent Power P2"
        device_class: "apparent_power"
        unit_of_measurement: VA
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Power Factor P2"
        device_class: "power_factor"
        state_class: "measurement"
        accuracy_decimals: 2
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Voltage P2"
        device_class: "voltage"
        unit_of_measurement: V
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Current P2"
        device_class: "current"
        unit_of_measurement: A
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }


        #Phase 3 sensors
      - name: "Real Power P3"
        device_class: "power"
        unit_of_measurement: W
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Apparent Power P3"
        device_class: "apparent_power"
        unit_of_measurement: VA
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Power Factor P3"
        device_class: "power_factor"
        state_class: "measurement"
        accuracy_decimals: 2
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Voltage P3"
        device_class: "voltage"
        unit_of_measurement: V
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }   
      - name: "Current P3"
        device_class: "current"
        unit_of_measurement: A
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }  





      #Total sensors
      - name: "Total Real Power"
        id: "real_power_sensor_total"
        device_class: "power"
        state_class: "measurement"
        unit_of_measurement: W
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }
      - name: "Total Apparent Power"
        device_class: "apparent_power"
        state_class: "measurement"
        unit_of_measurement: VA
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }
      - name: "Total Current"
        device_class: "current"
        state_class: "measurement"
        unit_of_measurement: A
        accuracy_decimals: 1
        internal: false
        filters:
          - lambda: |-
              //Avoid corrupting integration sensors
              if(!isinf(x) && !isnan(x) && x >= 0 && x <= 10e6)
                {
                return x;
                }
              else
                {
                return 0;
                }

  - platform: integration
    name: "Daily Consumption"
    id: "total_energy_day"
    sensor: real_power_sensor_total
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption"
    id: "total_energy_week"
    sensor: real_power_sensor_total
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption"
    id: "total_energy_month"
    sensor: real_power_sensor_total
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: false #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  # Wifi signal sensors
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    device_class: ""
    name: "WiFi signal"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

# Other information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP32 IP Address
    ssid:
      name: ESP32 SSID